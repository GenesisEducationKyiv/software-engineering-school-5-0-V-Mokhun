name: weather-api-dev
services:
  db-dev:
    image: postgres:17.5
    container_name: db-dev
    env_file:
      - apps/weather/.env.development
    volumes:
      - ./db-data/dev:/var/lib/postgresql/data
    ports:
      - 5433:5432
    networks:
      - weather-api-network-dev
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-dev:
    image: redis:8.0
    container_name: redis-dev
    env_file:
      - apps/weather/.env.development
    ports:
      - 6380:6379
    networks:
      - weather-api-network-dev
    volumes:
      - ./redis-data/dev:/data
    restart: always
    command:
      [
        "redis-server",
        "--appendonly",
        "yes",
        "--maxmemory",
        "512mb",
        "--maxmemory-policy",
        "noeviction",
      ]
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  weather-service-dev:
    container_name: weather-service-dev
    env_file:
      - apps/weather/.env.development
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db-dev:5432/${POSTGRES_DB}
    ports:
      - 8001:8000
    networks:
      - weather-api-network-dev
    restart: always
    build:
      context: .
      dockerfile: apps/weather/Dockerfile
      target: development
    depends_on:
      db-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    volumes:
      - ./apps:/app/apps
      - ./packages:/app/packages
      - ./prisma:/app/prisma
    develop:
      watch:
        - action: sync
          path: ./apps/weather
          target: ./apps/weather
          ignore:
            - node_modules/
        - action: rebuild
          path: ./apps/weather/package.json
          target: ./apps/weather/package.json
        - action: sync
          path: ./packages/common
          target: ./packages/common
          ignore:
            - node_modules/
        - action: sync
          path: ./packages/logger
          target: ./packages/logger
          ignore:
            - node_modules/
    command: ["npm", "run", "dev", "--workspace=apps/weather"]

  notifications-service-dev:
    container_name: notifications-service-dev
    env_file:
      - apps/notifications/.env.development
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db-dev:5432/${POSTGRES_DB}
    networks:
      - weather-api-network-dev
    restart: always
    build:
      context: .
      dockerfile: apps/notifications/Dockerfile
      target: development
    depends_on:
      db-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    volumes:
      - ./apps:/app/apps
      - ./packages:/app/packages
      - ./prisma:/app/prisma
    develop:
      watch:
        - action: sync
          path: ./apps/notifications
          target: ./apps/notifications
          ignore:
            - node_modules/
        - action: sync
          path: ./packages/common
          target: ./packages/common
          ignore:
            - node_modules/
        - action: sync
          path: ./packages/logger
          target: ./packages/logger
          ignore:
            - node_modules/
    command: ["npm", "run", "dev", "--workspace=apps/notifications"]

  prometheus-dev:
    container_name: prometheus-dev
    image: prom/prometheus:v3.4.2
    volumes:
      - "./monitoring/prometheus-dev.yml:/etc/prometheus/prometheus.yml"
      - prometheus-data-dev:/prometheus
    networks:
      - weather-api-network-dev
    ports:
      - 9091:9090

  grafana-dev:
    container_name: grafana-dev
    image: grafana/grafana:12.0.2
    ports:
      - 3001:3000
    networks:
      - weather-api-network-dev
    volumes:
      - grafana-data-dev:/var/lib/grafana

networks:
  weather-api-network-dev:
    driver: bridge

volumes:
  prometheus-data-dev:
  grafana-data-dev:
