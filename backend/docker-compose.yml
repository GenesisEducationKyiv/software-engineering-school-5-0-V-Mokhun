name: weather-api
services:
  db:
    image: postgres:17.5
    container_name: db
    env_file:
      - apps/weather/.env
    volumes:
      - ./db-data/prod:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      - weather-api-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:8.0
    container_name: redis
    env_file:
      - apps/weather/.env
    ports:
      - 6379:6379
    networks:
      - weather-api-network
    volumes:
      - ./redis-data/prod:/data
    restart: always
    command:
      [
        "redis-server",
        "--appendonly",
        "yes",
        "--maxmemory",
        "512mb",
        "--maxmemory-policy",
        "noeviction",
      ]
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  weather-service:
    container_name: weather-service
    env_file:
      - apps/weather/.env
    ports:
      - 8000:8000
    networks:
      - weather-api-network
    restart: always
    build:
      context: .
      dockerfile: apps/weather/Dockerfile
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  notifications-service:
    container_name: notifications-service
    env_file:
      - apps/notifications/.env
    networks:
      - weather-api-network
    restart: always
    ports:
      - 8100:8100
    build:
      context: .
      dockerfile: apps/notifications/Dockerfile
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v3.4.2
    volumes:
      - "./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml"
      - prometheus-data:/prometheus
    networks:
      - weather-api-network
    ports:
      - 9090:9090
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"

  grafana:
    container_name: grafana
    image: grafana/grafana:12.0.2
    ports:
      - 3000:3000
    networks:
      - weather-api-network
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      loki:
        condition: service_started

  loki:
    container_name: loki
    image: grafana/loki:latest
    ports:
      - 3100:3100
    volumes:
      - loki-data:/data
    networks:
      - weather-api-network

networks:
  weather-api-network:
    driver: bridge

volumes:
  prometheus-data:
  grafana-data:
  loki-data:
