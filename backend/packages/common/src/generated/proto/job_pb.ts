// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file proto/job.proto (package job, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message job.WeatherData
 */
export class WeatherData extends Message<WeatherData> {
  /**
   * @generated from field: float temperature = 1;
   */
  temperature = 0;

  /**
   * @generated from field: int32 humidity = 2;
   */
  humidity = 0;

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  constructor(data?: PartialMessage<WeatherData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "job.WeatherData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "temperature", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: "humidity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WeatherData {
    return new WeatherData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WeatherData {
    return new WeatherData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WeatherData {
    return new WeatherData().fromJsonString(jsonString, options);
  }

  static equals(a: WeatherData | PlainMessage<WeatherData> | undefined, b: WeatherData | PlainMessage<WeatherData> | undefined): boolean {
    return proto3.util.equals(WeatherData, a, b);
  }
}

/**
 * @generated from message job.ConfirmEmailJobData
 */
export class ConfirmEmailJobData extends Message<ConfirmEmailJobData> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: string city = 2;
   */
  city = "";

  /**
   * @generated from field: string confirmToken = 3;
   */
  confirmToken = "";

  constructor(data?: PartialMessage<ConfirmEmailJobData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "job.ConfirmEmailJobData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "confirmToken", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfirmEmailJobData {
    return new ConfirmEmailJobData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfirmEmailJobData {
    return new ConfirmEmailJobData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfirmEmailJobData {
    return new ConfirmEmailJobData().fromJsonString(jsonString, options);
  }

  static equals(a: ConfirmEmailJobData | PlainMessage<ConfirmEmailJobData> | undefined, b: ConfirmEmailJobData | PlainMessage<ConfirmEmailJobData> | undefined): boolean {
    return proto3.util.equals(ConfirmEmailJobData, a, b);
  }
}

/**
 * @generated from message job.UpdateWeatherDataJobData
 */
export class UpdateWeatherDataJobData extends Message<UpdateWeatherDataJobData> {
  /**
   * @generated from field: int32 subscriptionId = 1;
   */
  subscriptionId = 0;

  constructor(data?: PartialMessage<UpdateWeatherDataJobData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "job.UpdateWeatherDataJobData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscriptionId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateWeatherDataJobData {
    return new UpdateWeatherDataJobData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateWeatherDataJobData {
    return new UpdateWeatherDataJobData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateWeatherDataJobData {
    return new UpdateWeatherDataJobData().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateWeatherDataJobData | PlainMessage<UpdateWeatherDataJobData> | undefined, b: UpdateWeatherDataJobData | PlainMessage<UpdateWeatherDataJobData> | undefined): boolean {
    return proto3.util.equals(UpdateWeatherDataJobData, a, b);
  }
}

/**
 * @generated from message job.SendWeatherUpdateEmailJobData
 */
export class SendWeatherUpdateEmailJobData extends Message<SendWeatherUpdateEmailJobData> {
  /**
   * @generated from field: int32 subscriptionId = 1;
   */
  subscriptionId = 0;

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: string city = 3;
   */
  city = "";

  /**
   * @generated from field: string unsubscribeToken = 4;
   */
  unsubscribeToken = "";

  /**
   * @generated from field: job.WeatherData weatherData = 5;
   */
  weatherData?: WeatherData;

  constructor(data?: PartialMessage<SendWeatherUpdateEmailJobData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "job.SendWeatherUpdateEmailJobData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscriptionId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "unsubscribeToken", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "weatherData", kind: "message", T: WeatherData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendWeatherUpdateEmailJobData {
    return new SendWeatherUpdateEmailJobData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendWeatherUpdateEmailJobData {
    return new SendWeatherUpdateEmailJobData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendWeatherUpdateEmailJobData {
    return new SendWeatherUpdateEmailJobData().fromJsonString(jsonString, options);
  }

  static equals(a: SendWeatherUpdateEmailJobData | PlainMessage<SendWeatherUpdateEmailJobData> | undefined, b: SendWeatherUpdateEmailJobData | PlainMessage<SendWeatherUpdateEmailJobData> | undefined): boolean {
    return proto3.util.equals(SendWeatherUpdateEmailJobData, a, b);
  }
}

